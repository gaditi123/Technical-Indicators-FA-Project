# -*- coding: utf-8 -*-
"""Bollinger Bands & Keltner Channels

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n2Ts70zGUvLZXjRiRYgzHKHh0-JJaDVl
"""

!pip install yfinance
!pip install ta
#Installing yahoo finance libraries for data collection

import yfinance as yf
import ta
import pandas as pd
from datetime import date, timedelta, datetime
from IPython.display import clear_output

!pip3 install numpy==1.20.0
!pip3 install pandas==1.1.4

!pip3 install pandas-datareader==0.9.0

!pip3 install matplotlib==3.3.3

!pip3 install --upgrade pandas
!pip3 install --upgrade pandas-datareader

#https://www.learnpythonwithrune.org/pandas-calculate-and-plot-the-bollinger-bands-for-a-stock/
import pandas_datareader as pdr
import datetime as dt
import matplotlib.pyplot as plt


ticker = pdr.get_data_yahoo("HDFCBANK.NS", dt.datetime(2018, 4, 1), dt.datetime(2019,3,31))[['Close', 'High', 'Low']]

# Boillinger band calculations
ticker['TP'] = (ticker['Close'] + ticker['Low'] + ticker['High'])/3
ticker['std'] = ticker['TP'].rolling(20).std(ddof=0)
ticker['MA-TP'] = ticker['TP'].rolling(20).mean()
#Using Simple moving average filter->20
ticker['BOLU'] = ticker['MA-TP'] + 2*ticker['std']
#Upper Bollinger Band
ticker['BOLD'] = ticker['MA-TP'] - 2*ticker['std']
#Lower Bollinger Band
ticker = ticker.dropna()

ax = ticker[['Close', 'BOLU', 'BOLD']].plot(color=['blue', 'orange', 'yellow'])
ax.fill_between(ticker.index, ticker['BOLD'], ticker['BOLU'], facecolor='orange', alpha=0.1)
plt.show()

#https://www.learnpythonwithrune.org/pandas-calculate-and-plot-the-bollinger-bands-for-a-stock/
import pandas_datareader as pdr
import datetime as dt
import matplotlib.pyplot as plt


ticker = pdr.get_data_yahoo("INFY.NS", dt.datetime(2018, 4, 1), dt.datetime(2019,3,31))[['Close', 'High', 'Low']]

# Boillinger band calculations
ticker['TP'] = (ticker['Close'] + ticker['Low'] + ticker['High'])/3
ticker['std'] = ticker['TP'].rolling(20).std(ddof=0)
ticker['MA-TP'] = ticker['TP'].rolling(20).mean()
#Using Simple moving average filter->20
ticker['BOLU'] = ticker['MA-TP'] + 2*ticker['std']
#Upper Bollinger Band
ticker['BOLD'] = ticker['MA-TP'] - 2*ticker['std']
#Lower Bollinger Band
ticker = ticker.dropna()
print(ticker)

ax = ticker[['Close', 'BOLU', 'BOLD']].plot(color=['blue', 'orange', 'yellow'])
ax.fill_between(ticker.index, ticker['BOLD'], ticker['BOLU'], facecolor='orange', alpha=0.1)
plt.show()

#https://www.learnpythonwithrune.org/pandas-calculate-and-plot-the-bollinger-bands-for-a-stock/
import pandas_datareader as pdr
import datetime as dt
import matplotlib.pyplot as plt


ticker = pdr.get_data_yahoo("TATAMOTORS.NS", dt.datetime(2018, 4, 1), dt.datetime(2019,3,31))[['Close', 'High', 'Low']]

# Boillinger band calculations
ticker['TP'] = (ticker['Close'] + ticker['Low'] + ticker['High'])/3
ticker['std'] = ticker['TP'].rolling(20).std(ddof=0)
ticker['MA-TP'] = ticker['TP'].rolling(20).mean()
#Using Simple moving average filter->20
ticker['BOLU'] = ticker['MA-TP'] + 2*ticker['std']
#Upper Bollinger Band
ticker['BOLD'] = ticker['MA-TP'] - 2*ticker['std']
#Lower Bollinger Band
ticker = ticker.dropna()
print(ticker)

ax = ticker[['Close', 'BOLU', 'BOLD']].plot(color=['blue', 'orange', 'yellow'])
ax.fill_between(ticker.index, ticker['BOLD'], ticker['BOLU'], facecolor='orange', alpha=0.1)
plt.show()